ALTER TABLE IDN_OAUTH2_ACCESS_TOKEN ADD COLUMN TOKEN_BINDING_REF VARCHAR(32) NOT NULL DEFAULT 'NONE'
/

CALL SYSPROC.ADMIN_CMD('REORG TABLE IDN_OAUTH2_ACCESS_TOKEN')
/

CREATE OR REPLACE FUNCTION NEWUUID()
RETURNS CHAR(36)
BEGIN
    DECLARE @UUID CHAR(32);
    SET @UUID=LOWER(HEX(RAND()*255) || HEX(RAND()*255));
    RETURN LEFT(@UUID,8)||'-'||
           SUBSTR(@UUID,9,4)||'-'||
           SUBSTR(@UUID,13,4)||'-'||
           SUBSTR(@UUID,17,4)||'-'||
           RIGHT(@UUID,12);
END
/

ALTER TABLE IDN_ASSOCIATED_ID ADD COLUMN ASSOCIATION_ID CHAR(36) NOT NULL DEFAULT 'NONE'
/

CALL SYSPROC.ADMIN_CMD('REORG TABLE IDN_ASSOCIATED_ID')
/

UPDATE IDN_ASSOCIATED_ID SET ASSOCIATION_ID = NEWUUID()
/

CALL SYSPROC.ADMIN_CMD('REORG TABLE IDN_ASSOCIATED_ID')
/

ALTER TABLE SP_APP
    ADD COLUMN UUID CHAR(36) NOT NULL DEFAULT 'NONE'
    ADD COLUMN IMAGE_URL VARCHAR(1024)
    ADD COLUMN ACCESS_URL VARCHAR(1024)
/

CALL SYSPROC.ADMIN_CMD('REORG TABLE SP_APP')
/

UPDATE SP_APP SET UUID = NEWUUID()
/

CALL SYSPROC.ADMIN_CMD('REORG TABLE SP_APP')
/

ALTER TABLE SP_APP ADD CONSTRAINT APPLICATION_UUID_CONSTRAINT UNIQUE(UUID)
/

CALL SYSPROC.ADMIN_CMD('REORG TABLE SP_APP')
/

ALTER TABLE IDP
    ADD COLUMN IMAGE_URL VARCHAR(1024)
    ADD COLUMN UUID CHAR(36) NOT NULL DEFAULT 'NONE'
/

CALL SYSPROC.ADMIN_CMD('REORG TABLE IDP')
/

UPDATE IDP SET UUID = NEWUUID()
/

CALL SYSPROC.ADMIN_CMD('REORG TABLE IDP')
/

ALTER TABLE IDP ADD CONSTRAINT IDP_UUID_CONSTRAINT UNIQUE(UUID)
/

CALL SYSPROC.ADMIN_CMD('REORG TABLE IDP')
/

DROP FUNCTION NEWUUID()
/

CREATE OR REPLACE PROCEDURE ALTER_IDN_CONFIG_FILE
     DYNAMIC RESULT SETS 0
     MODIFIES SQL DATA
     LANGUAGE SQL
BEGIN ATOMIC
	IF EXISTS(SELECT * FROM SYSCAT.TABLES WHERE TABNAME='IDN_CONFIG_FILE')
	THEN
		IF NOT EXISTS(SELECT * FROM SYSCAT.COLUMNS WHERE TABNAME='IDN_CONFIG_FILE' AND COLNAME='NAME')
		THEN
			EXECUTE IMMEDIATE 'ALTER TABLE IDN_CONFIG_FILE ADD COLUMN NAME VARCHAR(255) NULL';
		END IF;
	END IF;
END
/

CALL ALTER_IDN_CONFIG_FILE
/

DROP PROCEDURE ALTER_IDN_CONFIG_FILE
/

CREATE TABLE IDN_OAUTH2_TOKEN_BINDING (
    TOKEN_ID VARCHAR(255) NOT NULL,
    TOKEN_BINDING_TYPE VARCHAR(32) NOT NULL,
    TOKEN_BINDING_REF VARCHAR(32) NOT NULL,
    TOKEN_BINDING_VALUE VARCHAR(1024) NOT NULL,
    TENANT_ID INTEGER DEFAULT -1,
    PRIMARY KEY (TOKEN_ID),
    FOREIGN KEY (TOKEN_ID) REFERENCES IDN_OAUTH2_ACCESS_TOKEN(TOKEN_ID) ON DELETE CASCADE)
/

CREATE TABLE IDN_FEDERATED_AUTH_SESSION_MAPPING (
	IDP_SESSION_ID VARCHAR(255) NOT NULL,
	SESSION_ID VARCHAR(255) NOT NULL,
	IDP_NAME VARCHAR(255) NOT NULL,
	AUTHENTICATOR_ID VARCHAR(255),
	PROTOCOL_TYPE VARCHAR(255),
	TIME_CREATED TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (IDP_SESSION_ID)
)
/

-- IDN_OAUTH2_TOKEN_BINDING --
CREATE INDEX IDX_IDN_AUTH_BIND ON IDN_OAUTH2_TOKEN_BINDING (TOKEN_BINDING_REF)
/

-- IDN_ASSOCIATED_ID --
CREATE INDEX IDX_AI_DN_UN_AI ON IDN_ASSOCIATED_ID(DOMAIN_NAME, USER_NAME, ASSOCIATION_ID)
/

-- IDN_OAUTH2_ACCESS_TOKEN --
CREATE INDEX IDX_AT_CKID_AU_TID_UD_TSH_TS ON IDN_OAUTH2_ACCESS_TOKEN(CONSUMER_KEY_ID, AUTHZ_USER, TENANT_ID, USER_DOMAIN, TOKEN_SCOPE_HASH, TOKEN_STATE)
/

-- IDN_FEDERATED_AUTH_SESSION_MAPPING --
CREATE INDEX IDX_FEDERATED_AUTH_SESSION_ID ON IDN_FEDERATED_AUTH_SESSION_MAPPING (SESSION_ID)
/
